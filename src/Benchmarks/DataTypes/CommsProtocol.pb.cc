// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommsProtocol.proto

#include "Benchmarks/DataTypes/CommsProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_CommsProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPayload_CommsProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommsProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Footer_CommsProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommsProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_CommsProtocol_2eproto;
namespace CommmsProtocol
{
  class HeaderDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
  } _Header_default_instance_;
  class FooterDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Footer> _instance;
  } _Footer_default_instance_;
  class DataPayloadDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPayload> _instance;
  } _DataPayload_default_instance_;
  class NetworkMessageDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkMessage> _instance;
  } _NetworkMessage_default_instance_;
} // namespace CommmsProtocol
static void InitDefaultsscc_info_DataPayload_CommsProtocol_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::CommmsProtocol::_DataPayload_default_instance_;
    new (ptr)::CommmsProtocol::DataPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPayload_CommsProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataPayload_CommsProtocol_2eproto}, {}};

static void InitDefaultsscc_info_Footer_CommsProtocol_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::CommmsProtocol::_Footer_default_instance_;
    new (ptr)::CommmsProtocol::Footer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Footer_CommsProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Footer_CommsProtocol_2eproto}, {}};

static void InitDefaultsscc_info_Header_CommsProtocol_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::CommmsProtocol::_Header_default_instance_;
    new (ptr)::CommmsProtocol::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_CommsProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Header_CommsProtocol_2eproto}, {}};

static void InitDefaultsscc_info_NetworkMessage_CommsProtocol_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::CommmsProtocol::_NetworkMessage_default_instance_;
    new (ptr)::CommmsProtocol::NetworkMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NetworkMessage_CommsProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NetworkMessage_CommsProtocol_2eproto}, {
                                                                                                                                                             &scc_info_Header_CommsProtocol_2eproto.base,
                                                                                                                                                             &scc_info_DataPayload_CommsProtocol_2eproto.base,
                                                                                                                                                             &scc_info_Footer_CommsProtocol_2eproto.base,
                                                                                                                                                         }};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CommsProtocol_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_CommsProtocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_CommsProtocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CommsProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::Header, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::Header, serialnumber_),
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::Header, macaddress_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::Footer, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::Footer, crc_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::DataPayload, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::DataPayload, datapayload_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::NetworkMessage, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::NetworkMessage, hdr_),
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::NetworkMessage, data_),
    PROTOBUF_FIELD_OFFSET(::CommmsProtocol::NetworkMessage, footer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::CommmsProtocol::Header)},
    {7, -1, sizeof(::CommmsProtocol::Footer)},
    {13, -1, sizeof(::CommmsProtocol::DataPayload)},
    {19, -1, sizeof(::CommmsProtocol::NetworkMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::CommmsProtocol::_Header_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::CommmsProtocol::_Footer_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::CommmsProtocol::_DataPayload_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::CommmsProtocol::_NetworkMessage_default_instance_),
};

const char descriptor_table_protodef_CommsProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\023CommsProtocol.proto\022\016CommmsProtocol\"2\n"
    "\006Header\022\024\n\014serialNumber\030\001 \001(\r\022\022\n\nmacAddr"
    "ess\030\002 \001(\r\"\025\n\006Footer\022\013\n\003crc\030\001 \001(\r\"\"\n\013Data"
    "Payload\022\023\n\013dataPayload\030\001 \003(\r\"\210\001\n\016Network"
    "Message\022#\n\003hdr\030\001 \001(\0132\026.CommmsProtocol.He"
    "ader\022)\n\004data\030\002 \001(\0132\033.CommmsProtocol.Data"
    "Payload\022&\n\006footer\030\003 \001(\0132\026.CommmsProtocol"
    ".Footerb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_CommsProtocol_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_CommsProtocol_2eproto_sccs[4] = {
    &scc_info_DataPayload_CommsProtocol_2eproto.base,
    &scc_info_Footer_CommsProtocol_2eproto.base,
    &scc_info_Header_CommsProtocol_2eproto.base,
    &scc_info_NetworkMessage_CommsProtocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CommsProtocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommsProtocol_2eproto = {
    false,
    false,
    descriptor_table_protodef_CommsProtocol_2eproto,
    "CommsProtocol.proto",
    295,
    &descriptor_table_CommsProtocol_2eproto_once,
    descriptor_table_CommsProtocol_2eproto_sccs,
    descriptor_table_CommsProtocol_2eproto_deps,
    4,
    0,
    schemas,
    file_default_instances,
    TableStruct_CommsProtocol_2eproto::offsets,
    file_level_metadata_CommsProtocol_2eproto,
    4,
    file_level_enum_descriptors_CommsProtocol_2eproto,
    file_level_service_descriptors_CommsProtocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CommsProtocol_2eproto(&descriptor_table_CommsProtocol_2eproto);
namespace CommmsProtocol
{

  // ===================================================================

  class Header::_Internal
  {
  public:
  };

  Header::Header(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:CommmsProtocol.Header)
  }
  Header::Header(const Header &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&serialnumber_, &from.serialnumber_,
             static_cast<size_t>(reinterpret_cast<char *>(&macaddress_) -
                                 reinterpret_cast<char *>(&serialnumber_)) +
                 sizeof(macaddress_));
    // @@protoc_insertion_point(copy_constructor:CommmsProtocol.Header)
  }

  void Header::SharedCtor()
  {
    ::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(
                                                  reinterpret_cast<char *>(&serialnumber_) - reinterpret_cast<char *>(this)),
             0, static_cast<size_t>(reinterpret_cast<char *>(&macaddress_) - reinterpret_cast<char *>(&serialnumber_)) + sizeof(macaddress_));
  }

  Header::~Header()
  {
    // @@protoc_insertion_point(destructor:CommmsProtocol.Header)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Header::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void Header::ArenaDtor(void *object)
  {
    Header *_this = reinterpret_cast<Header *>(object);
    (void)_this;
  }
  void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void Header::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const Header &Header::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_CommsProtocol_2eproto.base);
    return *internal_default_instance();
  }

  void Header::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:CommmsProtocol.Header)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&serialnumber_, 0, static_cast<size_t>(reinterpret_cast<char *>(&macaddress_) - reinterpret_cast<char *>(&serialnumber_)) + sizeof(macaddress_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Header::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // uint32 serialNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          serialnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint32 macAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
        {
          macaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Header::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:CommmsProtocol.Header)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 serialNumber = 1;
    if (this->serialnumber() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serialnumber(), target);
    }

    // uint32 macAddress = 2;
    if (this->macaddress() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_macaddress(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:CommmsProtocol.Header)
    return target;
  }

  size_t Header::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:CommmsProtocol.Header)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // uint32 serialNumber = 1;
    if (this->serialnumber() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                        this->_internal_serialnumber());
    }

    // uint32 macAddress = 2;
    if (this->macaddress() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                        this->_internal_macaddress());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:CommmsProtocol.Header)
    GOOGLE_DCHECK_NE(&from, this);
    const Header *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommmsProtocol.Header)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:CommmsProtocol.Header)
      MergeFrom(*source);
    }
  }

  void Header::MergeFrom(const Header &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:CommmsProtocol.Header)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.serialnumber() != 0)
    {
      _internal_set_serialnumber(from._internal_serialnumber());
    }
    if (from.macaddress() != 0)
    {
      _internal_set_macaddress(from._internal_macaddress());
    }
  }

  void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:CommmsProtocol.Header)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void Header::CopyFrom(const Header &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:CommmsProtocol.Header)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool Header::IsInitialized() const
  {
    return true;
  }

  void Header::InternalSwap(Header *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Header, macaddress_) + sizeof(Header::macaddress_) - PROTOBUF_FIELD_OFFSET(Header, serialnumber_)>(
        reinterpret_cast<char *>(&serialnumber_),
        reinterpret_cast<char *>(&other->serialnumber_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  class Footer::_Internal
  {
  public:
  };

  Footer::Footer(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:CommmsProtocol.Footer)
  }
  Footer::Footer(const Footer &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    crc_ = from.crc_;
    // @@protoc_insertion_point(copy_constructor:CommmsProtocol.Footer)
  }

  void Footer::SharedCtor()
  {
    crc_ = 0u;
  }

  Footer::~Footer()
  {
    // @@protoc_insertion_point(destructor:CommmsProtocol.Footer)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Footer::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void Footer::ArenaDtor(void *object)
  {
    Footer *_this = reinterpret_cast<Footer *>(object);
    (void)_this;
  }
  void Footer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void Footer::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const Footer &Footer::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Footer_CommsProtocol_2eproto.base);
    return *internal_default_instance();
  }

  void Footer::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:CommmsProtocol.Footer)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    crc_ = 0u;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Footer::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // uint32 crc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Footer::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:CommmsProtocol.Footer)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 crc = 1;
    if (this->crc() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_crc(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:CommmsProtocol.Footer)
    return target;
  }

  size_t Footer::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:CommmsProtocol.Footer)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // uint32 crc = 1;
    if (this->crc() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                        this->_internal_crc());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Footer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:CommmsProtocol.Footer)
    GOOGLE_DCHECK_NE(&from, this);
    const Footer *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Footer>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommmsProtocol.Footer)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:CommmsProtocol.Footer)
      MergeFrom(*source);
    }
  }

  void Footer::MergeFrom(const Footer &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:CommmsProtocol.Footer)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.crc() != 0)
    {
      _internal_set_crc(from._internal_crc());
    }
  }

  void Footer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:CommmsProtocol.Footer)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void Footer::CopyFrom(const Footer &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:CommmsProtocol.Footer)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool Footer::IsInitialized() const
  {
    return true;
  }

  void Footer::InternalSwap(Footer *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(crc_, other->crc_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Footer::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  class DataPayload::_Internal
  {
  public:
  };

  DataPayload::DataPayload(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena),
        datapayload_(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:CommmsProtocol.DataPayload)
  }
  DataPayload::DataPayload(const DataPayload &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        datapayload_(from.datapayload_)
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:CommmsProtocol.DataPayload)
  }

  void DataPayload::SharedCtor()
  {
  }

  DataPayload::~DataPayload()
  {
    // @@protoc_insertion_point(destructor:CommmsProtocol.DataPayload)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void DataPayload::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void DataPayload::ArenaDtor(void *object)
  {
    DataPayload *_this = reinterpret_cast<DataPayload *>(object);
    (void)_this;
  }
  void DataPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void DataPayload::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const DataPayload &DataPayload::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPayload_CommsProtocol_2eproto.base);
    return *internal_default_instance();
  }

  void DataPayload::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:CommmsProtocol.DataPayload)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    datapayload_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *DataPayload::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // repeated uint32 dataPayload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
        {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_datapayload(), ptr, ctx);
          CHK_(ptr);
        }
        else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)
        {
          _internal_add_datapayload(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *DataPayload::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:CommmsProtocol.DataPayload)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated uint32 dataPayload = 1;
    {
      int byte_size = _datapayload_cached_byte_size_.load(std::memory_order_relaxed);
      if (byte_size > 0)
      {
        target = stream->WriteUInt32Packed(
            1, _internal_datapayload(), byte_size, target);
      }
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:CommmsProtocol.DataPayload)
    return target;
  }

  size_t DataPayload::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:CommmsProtocol.DataPayload)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated uint32 dataPayload = 1;
    {
      size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
          UInt32Size(this->datapayload_);
      if (data_size > 0)
      {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
      }
      int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
      _datapayload_cached_byte_size_.store(cached_size,
                                           std::memory_order_relaxed);
      total_size += data_size;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void DataPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:CommmsProtocol.DataPayload)
    GOOGLE_DCHECK_NE(&from, this);
    const DataPayload *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPayload>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommmsProtocol.DataPayload)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:CommmsProtocol.DataPayload)
      MergeFrom(*source);
    }
  }

  void DataPayload::MergeFrom(const DataPayload &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:CommmsProtocol.DataPayload)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    datapayload_.MergeFrom(from.datapayload_);
  }

  void DataPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:CommmsProtocol.DataPayload)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void DataPayload::CopyFrom(const DataPayload &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:CommmsProtocol.DataPayload)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool DataPayload::IsInitialized() const
  {
    return true;
  }

  void DataPayload::InternalSwap(DataPayload *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    datapayload_.InternalSwap(&other->datapayload_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata DataPayload::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  class NetworkMessage::_Internal
  {
  public:
    static const ::CommmsProtocol::Header &hdr(const NetworkMessage *msg);
    static const ::CommmsProtocol::DataPayload &data(const NetworkMessage *msg);
    static const ::CommmsProtocol::Footer &footer(const NetworkMessage *msg);
  };

  const ::CommmsProtocol::Header &
  NetworkMessage::_Internal::hdr(const NetworkMessage *msg)
  {
    return *msg->hdr_;
  }
  const ::CommmsProtocol::DataPayload &
  NetworkMessage::_Internal::data(const NetworkMessage *msg)
  {
    return *msg->data_;
  }
  const ::CommmsProtocol::Footer &
  NetworkMessage::_Internal::footer(const NetworkMessage *msg)
  {
    return *msg->footer_;
  }
  NetworkMessage::NetworkMessage(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:CommmsProtocol.NetworkMessage)
  }
  NetworkMessage::NetworkMessage(const NetworkMessage &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_hdr())
    {
      hdr_ = new ::CommmsProtocol::Header(*from.hdr_);
    }
    else
    {
      hdr_ = nullptr;
    }
    if (from._internal_has_data())
    {
      data_ = new ::CommmsProtocol::DataPayload(*from.data_);
    }
    else
    {
      data_ = nullptr;
    }
    if (from._internal_has_footer())
    {
      footer_ = new ::CommmsProtocol::Footer(*from.footer_);
    }
    else
    {
      footer_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:CommmsProtocol.NetworkMessage)
  }

  void NetworkMessage::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkMessage_CommsProtocol_2eproto.base);
    ::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(
                                                  reinterpret_cast<char *>(&hdr_) - reinterpret_cast<char *>(this)),
             0, static_cast<size_t>(reinterpret_cast<char *>(&footer_) - reinterpret_cast<char *>(&hdr_)) + sizeof(footer_));
  }

  NetworkMessage::~NetworkMessage()
  {
    // @@protoc_insertion_point(destructor:CommmsProtocol.NetworkMessage)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void NetworkMessage::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance())
      delete hdr_;
    if (this != internal_default_instance())
      delete data_;
    if (this != internal_default_instance())
      delete footer_;
  }

  void NetworkMessage::ArenaDtor(void *object)
  {
    NetworkMessage *_this = reinterpret_cast<NetworkMessage *>(object);
    (void)_this;
  }
  void NetworkMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void NetworkMessage::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const NetworkMessage &NetworkMessage::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkMessage_CommsProtocol_2eproto.base);
    return *internal_default_instance();
  }

  void NetworkMessage::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:CommmsProtocol.NetworkMessage)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (GetArena() == nullptr && hdr_ != nullptr)
    {
      delete hdr_;
    }
    hdr_ = nullptr;
    if (GetArena() == nullptr && data_ != nullptr)
    {
      delete data_;
    }
    data_ = nullptr;
    if (GetArena() == nullptr && footer_ != nullptr)
    {
      delete footer_;
    }
    footer_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *NetworkMessage::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // .CommmsProtocol.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
        {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // .CommmsProtocol.DataPayload data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // .CommmsProtocol.Footer footer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26))
        {
          ptr = ctx->ParseMessage(_internal_mutable_footer(), ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *NetworkMessage::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:CommmsProtocol.NetworkMessage)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .CommmsProtocol.Header hdr = 1;
    if (this->has_hdr())
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
          InternalWriteMessage(
              1, _Internal::hdr(this), target, stream);
    }

    // .CommmsProtocol.DataPayload data = 2;
    if (this->has_data())
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
          InternalWriteMessage(
              2, _Internal::data(this), target, stream);
    }

    // .CommmsProtocol.Footer footer = 3;
    if (this->has_footer())
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
          InternalWriteMessage(
              3, _Internal::footer(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:CommmsProtocol.NetworkMessage)
    return target;
  }

  size_t NetworkMessage::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:CommmsProtocol.NetworkMessage)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // .CommmsProtocol.Header hdr = 1;
    if (this->has_hdr())
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                        *hdr_);
    }

    // .CommmsProtocol.DataPayload data = 2;
    if (this->has_data())
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                        *data_);
    }

    // .CommmsProtocol.Footer footer = 3;
    if (this->has_footer())
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                        *footer_);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void NetworkMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:CommmsProtocol.NetworkMessage)
    GOOGLE_DCHECK_NE(&from, this);
    const NetworkMessage *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkMessage>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommmsProtocol.NetworkMessage)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:CommmsProtocol.NetworkMessage)
      MergeFrom(*source);
    }
  }

  void NetworkMessage::MergeFrom(const NetworkMessage &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:CommmsProtocol.NetworkMessage)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.has_hdr())
    {
      _internal_mutable_hdr()->::CommmsProtocol::Header::MergeFrom(from._internal_hdr());
    }
    if (from.has_data())
    {
      _internal_mutable_data()->::CommmsProtocol::DataPayload::MergeFrom(from._internal_data());
    }
    if (from.has_footer())
    {
      _internal_mutable_footer()->::CommmsProtocol::Footer::MergeFrom(from._internal_footer());
    }
  }

  void NetworkMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:CommmsProtocol.NetworkMessage)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void NetworkMessage::CopyFrom(const NetworkMessage &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:CommmsProtocol.NetworkMessage)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool NetworkMessage::IsInitialized() const
  {
    return true;
  }

  void NetworkMessage::InternalSwap(NetworkMessage *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(NetworkMessage, footer_) + sizeof(NetworkMessage::footer_) - PROTOBUF_FIELD_OFFSET(NetworkMessage, hdr_)>(
        reinterpret_cast<char *>(&hdr_),
        reinterpret_cast<char *>(&other->hdr_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata NetworkMessage::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // @@protoc_insertion_point(namespace_scope)
} // namespace CommmsProtocol
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::CommmsProtocol::Header *Arena::CreateMaybeMessage<::CommmsProtocol::Header>(Arena *arena)
{
  return Arena::CreateMessageInternal<::CommmsProtocol::Header>(arena);
}
template <>
PROTOBUF_NOINLINE ::CommmsProtocol::Footer *Arena::CreateMaybeMessage<::CommmsProtocol::Footer>(Arena *arena)
{
  return Arena::CreateMessageInternal<::CommmsProtocol::Footer>(arena);
}
template <>
PROTOBUF_NOINLINE ::CommmsProtocol::DataPayload *Arena::CreateMaybeMessage<::CommmsProtocol::DataPayload>(Arena *arena)
{
  return Arena::CreateMessageInternal<::CommmsProtocol::DataPayload>(arena);
}
template <>
PROTOBUF_NOINLINE ::CommmsProtocol::NetworkMessage *Arena::CreateMaybeMessage<::CommmsProtocol::NetworkMessage>(Arena *arena)
{
  return Arena::CreateMessageInternal<::CommmsProtocol::NetworkMessage>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
