// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommsProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommsProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommsProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommsProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommsProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommsProtocol_2eproto;
namespace CommmsProtocol {
class DataPayload;
class DataPayloadDefaultTypeInternal;
extern DataPayloadDefaultTypeInternal _DataPayload_default_instance_;
class Footer;
class FooterDefaultTypeInternal;
extern FooterDefaultTypeInternal _Footer_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class NetworkMessage;
class NetworkMessageDefaultTypeInternal;
extern NetworkMessageDefaultTypeInternal _NetworkMessage_default_instance_;
}  // namespace CommmsProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::CommmsProtocol::DataPayload* Arena::CreateMaybeMessage<::CommmsProtocol::DataPayload>(Arena*);
template<> ::CommmsProtocol::Footer* Arena::CreateMaybeMessage<::CommmsProtocol::Footer>(Arena*);
template<> ::CommmsProtocol::Header* Arena::CreateMaybeMessage<::CommmsProtocol::Header>(Arena*);
template<> ::CommmsProtocol::NetworkMessage* Arena::CreateMaybeMessage<::CommmsProtocol::NetworkMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CommmsProtocol {

// ===================================================================

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommmsProtocol.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommmsProtocol.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommsProtocol_2eproto);
    return ::descriptor_table_CommsProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kMacAddressFieldNumber = 2,
  };
  // uint32 serialNumber = 1;
  void clear_serialnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 serialnumber() const;
  void set_serialnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serialnumber() const;
  void _internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 macAddress = 2;
  void clear_macaddress();
  ::PROTOBUF_NAMESPACE_ID::uint32 macaddress() const;
  void set_macaddress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_macaddress() const;
  void _internal_set_macaddress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommmsProtocol.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serialnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 macaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommsProtocol_2eproto;
};
// -------------------------------------------------------------------

class Footer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommmsProtocol.Footer) */ {
 public:
  inline Footer() : Footer(nullptr) {}
  virtual ~Footer();

  Footer(const Footer& from);
  Footer(Footer&& from) noexcept
    : Footer() {
    *this = ::std::move(from);
  }

  inline Footer& operator=(const Footer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Footer& operator=(Footer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Footer& default_instance();

  static inline const Footer* internal_default_instance() {
    return reinterpret_cast<const Footer*>(
               &_Footer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Footer& a, Footer& b) {
    a.Swap(&b);
  }
  inline void Swap(Footer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Footer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Footer* New() const final {
    return CreateMaybeMessage<Footer>(nullptr);
  }

  Footer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Footer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Footer& from);
  void MergeFrom(const Footer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Footer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommmsProtocol.Footer";
  }
  protected:
  explicit Footer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommsProtocol_2eproto);
    return ::descriptor_table_CommsProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrcFieldNumber = 1,
  };
  // uint32 crc = 1;
  void clear_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc() const;
  void set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc() const;
  void _internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommmsProtocol.Footer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommsProtocol_2eproto;
};
// -------------------------------------------------------------------

class DataPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommmsProtocol.DataPayload) */ {
 public:
  inline DataPayload() : DataPayload(nullptr) {}
  virtual ~DataPayload();

  DataPayload(const DataPayload& from);
  DataPayload(DataPayload&& from) noexcept
    : DataPayload() {
    *this = ::std::move(from);
  }

  inline DataPayload& operator=(const DataPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPayload& operator=(DataPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataPayload& default_instance();

  static inline const DataPayload* internal_default_instance() {
    return reinterpret_cast<const DataPayload*>(
               &_DataPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataPayload& a, DataPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataPayload* New() const final {
    return CreateMaybeMessage<DataPayload>(nullptr);
  }

  DataPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataPayload& from);
  void MergeFrom(const DataPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommmsProtocol.DataPayload";
  }
  protected:
  explicit DataPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommsProtocol_2eproto);
    return ::descriptor_table_CommsProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPayloadFieldNumber = 1,
  };
  // repeated uint32 dataPayload = 1;
  int datapayload_size() const;
  private:
  int _internal_datapayload_size() const;
  public:
  void clear_datapayload();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datapayload(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_datapayload() const;
  void _internal_add_datapayload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_datapayload();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 datapayload(int index) const;
  void set_datapayload(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_datapayload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      datapayload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_datapayload();

  // @@protoc_insertion_point(class_scope:CommmsProtocol.DataPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > datapayload_;
  mutable std::atomic<int> _datapayload_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommsProtocol_2eproto;
};
// -------------------------------------------------------------------

class NetworkMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommmsProtocol.NetworkMessage) */ {
 public:
  inline NetworkMessage() : NetworkMessage(nullptr) {}
  virtual ~NetworkMessage();

  NetworkMessage(const NetworkMessage& from);
  NetworkMessage(NetworkMessage&& from) noexcept
    : NetworkMessage() {
    *this = ::std::move(from);
  }

  inline NetworkMessage& operator=(const NetworkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkMessage& operator=(NetworkMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkMessage& default_instance();

  static inline const NetworkMessage* internal_default_instance() {
    return reinterpret_cast<const NetworkMessage*>(
               &_NetworkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetworkMessage& a, NetworkMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkMessage* New() const final {
    return CreateMaybeMessage<NetworkMessage>(nullptr);
  }

  NetworkMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkMessage& from);
  void MergeFrom(const NetworkMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommmsProtocol.NetworkMessage";
  }
  protected:
  explicit NetworkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommsProtocol_2eproto);
    return ::descriptor_table_CommsProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 1,
    kDataFieldNumber = 2,
    kFooterFieldNumber = 3,
  };
  // .CommmsProtocol.Header hdr = 1;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::CommmsProtocol::Header& hdr() const;
  ::CommmsProtocol::Header* release_hdr();
  ::CommmsProtocol::Header* mutable_hdr();
  void set_allocated_hdr(::CommmsProtocol::Header* hdr);
  private:
  const ::CommmsProtocol::Header& _internal_hdr() const;
  ::CommmsProtocol::Header* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::CommmsProtocol::Header* hdr);
  ::CommmsProtocol::Header* unsafe_arena_release_hdr();

  // .CommmsProtocol.DataPayload data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CommmsProtocol::DataPayload& data() const;
  ::CommmsProtocol::DataPayload* release_data();
  ::CommmsProtocol::DataPayload* mutable_data();
  void set_allocated_data(::CommmsProtocol::DataPayload* data);
  private:
  const ::CommmsProtocol::DataPayload& _internal_data() const;
  ::CommmsProtocol::DataPayload* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CommmsProtocol::DataPayload* data);
  ::CommmsProtocol::DataPayload* unsafe_arena_release_data();

  // .CommmsProtocol.Footer footer = 3;
  bool has_footer() const;
  private:
  bool _internal_has_footer() const;
  public:
  void clear_footer();
  const ::CommmsProtocol::Footer& footer() const;
  ::CommmsProtocol::Footer* release_footer();
  ::CommmsProtocol::Footer* mutable_footer();
  void set_allocated_footer(::CommmsProtocol::Footer* footer);
  private:
  const ::CommmsProtocol::Footer& _internal_footer() const;
  ::CommmsProtocol::Footer* _internal_mutable_footer();
  public:
  void unsafe_arena_set_allocated_footer(
      ::CommmsProtocol::Footer* footer);
  ::CommmsProtocol::Footer* unsafe_arena_release_footer();

  // @@protoc_insertion_point(class_scope:CommmsProtocol.NetworkMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CommmsProtocol::Header* hdr_;
  ::CommmsProtocol::DataPayload* data_;
  ::CommmsProtocol::Footer* footer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommsProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// uint32 serialNumber = 1;
inline void Header::clear_serialnumber() {
  serialnumber_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_serialnumber() const {
  return serialnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::serialnumber() const {
  // @@protoc_insertion_point(field_get:CommmsProtocol.Header.serialNumber)
  return _internal_serialnumber();
}
inline void Header::_internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serialnumber_ = value;
}
inline void Header::set_serialnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:CommmsProtocol.Header.serialNumber)
}

// uint32 macAddress = 2;
inline void Header::clear_macaddress() {
  macaddress_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_macaddress() const {
  return macaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::macaddress() const {
  // @@protoc_insertion_point(field_get:CommmsProtocol.Header.macAddress)
  return _internal_macaddress();
}
inline void Header::_internal_set_macaddress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  macaddress_ = value;
}
inline void Header::set_macaddress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_macaddress(value);
  // @@protoc_insertion_point(field_set:CommmsProtocol.Header.macAddress)
}

// -------------------------------------------------------------------

// Footer

// uint32 crc = 1;
inline void Footer::clear_crc() {
  crc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Footer::_internal_crc() const {
  return crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Footer::crc() const {
  // @@protoc_insertion_point(field_get:CommmsProtocol.Footer.crc)
  return _internal_crc();
}
inline void Footer::_internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crc_ = value;
}
inline void Footer::set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CommmsProtocol.Footer.crc)
}

// -------------------------------------------------------------------

// DataPayload

// repeated uint32 dataPayload = 1;
inline int DataPayload::_internal_datapayload_size() const {
  return datapayload_.size();
}
inline int DataPayload::datapayload_size() const {
  return _internal_datapayload_size();
}
inline void DataPayload::clear_datapayload() {
  datapayload_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataPayload::_internal_datapayload(int index) const {
  return datapayload_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataPayload::datapayload(int index) const {
  // @@protoc_insertion_point(field_get:CommmsProtocol.DataPayload.dataPayload)
  return _internal_datapayload(index);
}
inline void DataPayload::set_datapayload(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  datapayload_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommmsProtocol.DataPayload.dataPayload)
}
inline void DataPayload::_internal_add_datapayload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  datapayload_.Add(value);
}
inline void DataPayload::add_datapayload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_datapayload(value);
  // @@protoc_insertion_point(field_add:CommmsProtocol.DataPayload.dataPayload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DataPayload::_internal_datapayload() const {
  return datapayload_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DataPayload::datapayload() const {
  // @@protoc_insertion_point(field_list:CommmsProtocol.DataPayload.dataPayload)
  return _internal_datapayload();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DataPayload::_internal_mutable_datapayload() {
  return &datapayload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DataPayload::mutable_datapayload() {
  // @@protoc_insertion_point(field_mutable_list:CommmsProtocol.DataPayload.dataPayload)
  return _internal_mutable_datapayload();
}

// -------------------------------------------------------------------

// NetworkMessage

// .CommmsProtocol.Header hdr = 1;
inline bool NetworkMessage::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool NetworkMessage::has_hdr() const {
  return _internal_has_hdr();
}
inline void NetworkMessage::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
inline const ::CommmsProtocol::Header& NetworkMessage::_internal_hdr() const {
  const ::CommmsProtocol::Header* p = hdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommmsProtocol::Header&>(
      ::CommmsProtocol::_Header_default_instance_);
}
inline const ::CommmsProtocol::Header& NetworkMessage::hdr() const {
  // @@protoc_insertion_point(field_get:CommmsProtocol.NetworkMessage.hdr)
  return _internal_hdr();
}
inline void NetworkMessage::unsafe_arena_set_allocated_hdr(
    ::CommmsProtocol::Header* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommmsProtocol.NetworkMessage.hdr)
}
inline ::CommmsProtocol::Header* NetworkMessage::release_hdr() {
  
  ::CommmsProtocol::Header* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommmsProtocol::Header* NetworkMessage::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:CommmsProtocol.NetworkMessage.hdr)
  
  ::CommmsProtocol::Header* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::CommmsProtocol::Header* NetworkMessage::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommmsProtocol::Header>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::CommmsProtocol::Header* NetworkMessage::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:CommmsProtocol.NetworkMessage.hdr)
  return _internal_mutable_hdr();
}
inline void NetworkMessage::set_allocated_hdr(::CommmsProtocol::Header* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdr_;
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdr);
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:CommmsProtocol.NetworkMessage.hdr)
}

// .CommmsProtocol.DataPayload data = 2;
inline bool NetworkMessage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool NetworkMessage::has_data() const {
  return _internal_has_data();
}
inline void NetworkMessage::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::CommmsProtocol::DataPayload& NetworkMessage::_internal_data() const {
  const ::CommmsProtocol::DataPayload* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommmsProtocol::DataPayload&>(
      ::CommmsProtocol::_DataPayload_default_instance_);
}
inline const ::CommmsProtocol::DataPayload& NetworkMessage::data() const {
  // @@protoc_insertion_point(field_get:CommmsProtocol.NetworkMessage.data)
  return _internal_data();
}
inline void NetworkMessage::unsafe_arena_set_allocated_data(
    ::CommmsProtocol::DataPayload* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommmsProtocol.NetworkMessage.data)
}
inline ::CommmsProtocol::DataPayload* NetworkMessage::release_data() {
  
  ::CommmsProtocol::DataPayload* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommmsProtocol::DataPayload* NetworkMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CommmsProtocol.NetworkMessage.data)
  
  ::CommmsProtocol::DataPayload* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::CommmsProtocol::DataPayload* NetworkMessage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommmsProtocol::DataPayload>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::CommmsProtocol::DataPayload* NetworkMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CommmsProtocol.NetworkMessage.data)
  return _internal_mutable_data();
}
inline void NetworkMessage::set_allocated_data(::CommmsProtocol::DataPayload* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CommmsProtocol.NetworkMessage.data)
}

// .CommmsProtocol.Footer footer = 3;
inline bool NetworkMessage::_internal_has_footer() const {
  return this != internal_default_instance() && footer_ != nullptr;
}
inline bool NetworkMessage::has_footer() const {
  return _internal_has_footer();
}
inline void NetworkMessage::clear_footer() {
  if (GetArena() == nullptr && footer_ != nullptr) {
    delete footer_;
  }
  footer_ = nullptr;
}
inline const ::CommmsProtocol::Footer& NetworkMessage::_internal_footer() const {
  const ::CommmsProtocol::Footer* p = footer_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommmsProtocol::Footer&>(
      ::CommmsProtocol::_Footer_default_instance_);
}
inline const ::CommmsProtocol::Footer& NetworkMessage::footer() const {
  // @@protoc_insertion_point(field_get:CommmsProtocol.NetworkMessage.footer)
  return _internal_footer();
}
inline void NetworkMessage::unsafe_arena_set_allocated_footer(
    ::CommmsProtocol::Footer* footer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_);
  }
  footer_ = footer;
  if (footer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommmsProtocol.NetworkMessage.footer)
}
inline ::CommmsProtocol::Footer* NetworkMessage::release_footer() {
  
  ::CommmsProtocol::Footer* temp = footer_;
  footer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommmsProtocol::Footer* NetworkMessage::unsafe_arena_release_footer() {
  // @@protoc_insertion_point(field_release:CommmsProtocol.NetworkMessage.footer)
  
  ::CommmsProtocol::Footer* temp = footer_;
  footer_ = nullptr;
  return temp;
}
inline ::CommmsProtocol::Footer* NetworkMessage::_internal_mutable_footer() {
  
  if (footer_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommmsProtocol::Footer>(GetArena());
    footer_ = p;
  }
  return footer_;
}
inline ::CommmsProtocol::Footer* NetworkMessage::mutable_footer() {
  // @@protoc_insertion_point(field_mutable:CommmsProtocol.NetworkMessage.footer)
  return _internal_mutable_footer();
}
inline void NetworkMessage::set_allocated_footer(::CommmsProtocol::Footer* footer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete footer_;
  }
  if (footer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(footer);
    if (message_arena != submessage_arena) {
      footer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer, submessage_arena);
    }
    
  } else {
    
  }
  footer_ = footer;
  // @@protoc_insertion_point(field_set_allocated:CommmsProtocol.NetworkMessage.footer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CommmsProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommsProtocol_2eproto
